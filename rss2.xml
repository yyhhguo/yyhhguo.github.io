<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>云端漫步</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>遨游知识之海</description>
    <pubDate>Sat, 11 May 2024 11:50:10 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>spring基础学习</title>
      <link>http://example.com/2024/05/10/spring%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</link>
      <guid>http://example.com/2024/05/10/spring%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</guid>
      <pubDate>Fri, 10 May 2024 12:23:04 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;IOC容器&quot;&gt;&lt;a href=&quot;#IOC容器&quot; class=&quot;headerlink&quot; title=&quot;IOC容器&quot;&gt;&lt;/a&gt;IOC容器&lt;/h3&gt;&lt;h4 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>IOC将对象的创建，组装和管理的控制权从应用程序代码中反转到spring的IOC容器中，由IOC容器的ApplicationContext，</p><p>实现对象的自动装配和依赖注入，自动装配体现在代码中就是（以注解为例）@Service,@Mapper…….，</p><p>依赖注入体现在代码中就是@Autoweird,@Resource。如此避免了在业务层中反复new对象。</p><ul><li>控制反转（IOC,Inversion of Control）控制指的是控制对象的创建过程，反转是反转创建对象的主体由程序员转化为容器， 在spring中容器是一个单例工厂，里面的每一个对象称之为bean，我们只需要在外部创建一个bean的构建过程，真正的创建由容器负责，在启动时期bean便完成了实例化</li></ul><h4 id="2-Bean的装配流程"><a href="#2-Bean的装配流程" class="headerlink" title="2.Bean的装配流程"></a>2.Bean的装配流程</h4><p>某个类中，添加@component注解后，项目在启动时，会执行Bean装配流程</p><p>项目启动 —&gt; 加载配置文件 —&gt; 根据配置文件生成bean对象 —&gt; 将bean对象上传到依赖池 —&gt; 装配完成</p><p>（1）配置文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在beans中通过bean将对象加入到IOC容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=<span class="string">&quot;student&quot;</span> class=<span class="string">&quot;com.test.bean.Student&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>（2）注解配置</p><p>使用注解则更为方便，通过@Bean便可声明为bean对象，在配置类中加入@componentScan就可以将其加入到IOC容器中进行管理。</p><p>这样我们就不必再项目中去new一个对象使用而是可以直接从IOC容器中去取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);   <span class="comment">//使用getBean方法来获取对应的对象（Bean）</span></span><br><span class="line">    student.hello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-使用IOC容器管理的好处"><a href="#3-使用IOC容器管理的好处" class="headerlink" title="3.使用IOC容器管理的好处"></a>3.使用IOC容器管理的好处</h4><ul><li><p>降低代码耦合度</p><p>如果不使用IOC容器管理，则两个相互依赖的类则需要手动创建出实例，如果其中一个类需要改变，则需要改变的大量代码，使用IOC容器后，则不再创建实例，而是声明需要的依赖，由容器负责在运行时注入正确的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 耦合度低的UserService示例（使用接口）  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository; <span class="comment">// 声明依赖，但不创建实例  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 通过构造函数注入依赖  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserRepository userRepository)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.userRepository = userRepository;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ... 其他业务方法  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// UserRepository接口  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> &#123;  </span><br><span class="line">    <span class="comment">// ... 定义方法  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// UserRepository的具体实现  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseUserRepository</span> <span class="keyword">implements</span> <span class="title class_">UserRepository</span> &#123;  </span><br><span class="line">    <span class="comment">// ... 实现方法  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 另一个UserRepository的实现（比如API调用）  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiUserRepository</span> <span class="keyword">implements</span> <span class="title class_">UserRepository</span> &#123;  </span><br><span class="line">    <span class="comment">// ... 实现方法  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p> 在这个例子中，<code>UserService</code>只依赖于<code>UserRepository</code>接口，而不是具体的实现类。这意味着我们可以轻松地替换<code>UserRepository</code>的实现，而无需修改<code>UserService</code>的代码。只需在配置文件中修改相关的代码</p><ul><li><p>安全性</p><p>在高并发情况下，如果每一步都需要new一个对象，则会增大对内存的压力，而IOC容器为单例模式，每次只需从缓存中获取，这样内存抖动不会太严重，保证程序的可靠性稳定性。</p></li></ul>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/05/10/spring%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>苍穹外卖总结</title>
      <link>http://example.com/2024/05/04/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E6%80%BB%E7%BB%93/</link>
      <guid>http://example.com/2024/05/04/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Sat, 04 May 2024 05:35:00 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;1-Nginx反向代理的好处：&quot;&gt;&lt;a href=&quot;#1-Nginx反向代理的好处：&quot; class=&quot;headerlink&quot; title=&quot;1.Nginx反向代理的好处：&quot;&gt;&lt;/a&gt;1.Nginx反向代理的好处：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;提高访问速度&lt;/li&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="1-Nginx反向代理的好处："><a href="#1-Nginx反向代理的好处：" class="headerlink" title="1.Nginx反向代理的好处："></a>1.Nginx反向代理的好处：</h4><ul><li>提高访问速度</li><li>进行负载平衡：所谓负载平衡额就是把大量请求按照我们所指定的方式均衡的分配给集群中的每台服务器</li><li>保证后端服务安全</li></ul><h4 id="2-ThreadLocal"><a href="#2-ThreadLocal" class="headerlink" title="2.ThreadLocal:"></a>2.ThreadLocal:</h4><p>ThreadLocal并不是一个Thread(线程),而是Thread的一个局部变量</p><p>ThreadLocal为每一个线程提供单独一份的存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p><h4 id="3-Redis"><a href="#3-Redis" class="headerlink" title="3.Redis"></a>3.Redis</h4><p>Redis是一个基于内存的key-value结构数据库,与之对应的mysql是基于磁盘的数据库</p><p>由于基于内存存储，所以他的读写性能高，适用于储存热点数据（短时间大量访问数据）如热点商品，资讯，新闻</p><h4 id="4-WebSocket"><a href="#4-WebSocket" class="headerlink" title="4.WebSocket"></a>4.WebSocket</h4><p>WebSocket是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。</p><p>过程：客户端向服务端发送一个请求（HandShake）握手，服务端对客户端进行应答（Acknowledgement）,这样，客户端与服务端便建立好链接，双方可以进行双向通信。 </p><p>HTTP</p><p>HTTP也是基于TCP的一种协议。请求响应模式，只有客户端向服务端发送请求，服务端才可以响应，不可颠倒，响应过后链接断开，故可称其为短链接</p><h4 id="5-JWT相关总结"><a href="#5-JWT相关总结" class="headerlink" title="5.JWT相关总结"></a>5.JWT相关总结</h4><p>（1）令牌的生成：由三部分组成，需要设置令牌的签名算法和签名密钥（保密，只能自己拥有，可随意设置）,过期时间，和主题数据（一般为用户id）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String secretKey, <span class="type">long</span> ttlMillis, Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">    <span class="comment">// 指定签名的时候使用的签名算法，也就是header那部分</span></span><br><span class="line">    <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成JWT的时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> System.currentTimeMillis() + ttlMillis;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置jwt的body</span></span><br><span class="line">    <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">            <span class="comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">            .setClaims(claims)</span><br><span class="line">            <span class="comment">// 设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">            .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">            <span class="comment">// 设置过期时间</span></span><br><span class="line">            .setExpiration(exp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> builder.compact();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 令牌的校验：即token的解密，通过JWTs的parser方法，设置密钥，以及需要解析的token，如果该过程为出异常，及说明令牌的校验成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String secretKey, String token)</span> &#123;</span><br><span class="line">    <span class="comment">// 得到DefaultJwtParser</span></span><br><span class="line">    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">            <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">            .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">            <span class="comment">// 设置需要解析的jwt</span></span><br><span class="line">            .parseClaimsJws(token).getBody();</span><br><span class="line">    <span class="keyword">return</span> claims;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两点通常封装在一个util类中，一遍登陆时进行校验</p><h4 id="6-消息推送的常见方式"><a href="#6-消息推送的常见方式" class="headerlink" title="6.消息推送的常见方式"></a>6.消息推送的常见方式</h4><p>（1）轮询：浏览器以指定的时间间隔向服务器发送HTTP请求，服务器实时返回数据给浏览器</p><p>   缺点：1-由于定时发送请求，可能会导致服务器数据更新，此时浏览器未发送请求，则会造成延迟</p><p>​               2-由于定时要向服务器发送请求，会造成服务器压力过大</p><p>（2）长轮询：浏览器发出ajax请求，服务器端收到请求后，会阻塞请求直到有数据或请求超时才返回</p><p>对比：由于有等待的过程，所以间隔时间可以长一些，相对于轮询对服务端造成的压力小。</p><p>并且由于必须收到数据才可返回，相对于轮询的延迟也会小。</p><p>（3）SSE 服务器发送事件</p><p>是服务端打开的和客户端之间的一个单向通道。  服务端相应的不再是一次性的数据包，而是text&#x2F;event-stream类型的数据流信息。  服务器有数据变更时将数据流式传输到客户端。</p><p>（4）WebSocket：如上。</p><p>补充：全双工：允许数据在两个方向上同时传输。</p><p>​           半双工：允许数据在两个方向上传输，但是同一个时间段内只允许一个方向上传输。</p><p>JAVA WebSocket应用由一系列的EndPoint组成。EndPoint是一个java对象，代表WebSocket链接的一端</p><p>每一个客户端，服务端都会创建一个EndPoint与之一对一对应，对于服务端，我们可以视为处理具体WebSocket消息的接口</p><p>EndPoint实例在WebSocket握手时创建，并在客户端与服务端连接过程中有效，最后在连接关闭时结束</p><p>服务端API</p><p>发送消息：1-服务端接受客户端发送的数据 常用：注解式@OnMessage</p><p>​         2-服务端推送数据给客户端：由RemoteEndpoint完成，实例由Session维护</p><p>​         通过session.getBasicRemote获取同步消息发送的实例，调用sendXXX()发送消息</p><p>​         通过session.getAsyncRemote获取异步消息发送的实例，调用sendXXX()发送消息</p><h4 id="7-AOP-面向切面"><a href="#7-AOP-面向切面" class="headerlink" title="7.AOP:面向切面"></a>7.AOP:面向切面</h4><p>动态代理是面向切面编程最主流的实现。而springAOP是spring框架的高级技术，旨在管理bean对象的过程中，主要通过底层的动态代理机制，对特定的方法进行编程。对特定的方法功能进行加强或改变其功能。</p><p>好处：代码无侵入，减少重复代码，提高开发效率，维护方便</p><p>核心概念</p><p>（1）连接点：joinPoint，可以被AOP控制的方法（暗含方法执行时的相关信息）</p><p>通过joinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名，方法名，方法参数。 </p><p>joinPoint可获得方法的签名，而方法签名包含了方法的名称，返回类型及参数列表</p><p>（2）通知：Advice，指那些重复的逻辑，也就是共性功能（最终体现为一个方法）</p><p>（3）切入点：PointCut，匹配连接点的条件，通知仅会在切入点方法被执行时被应用，通常通过切点表达式实现其功能。</p><p>区别：连接点时程序中所有潜在的可插入通知的位置，切入点则是从这些连接点筛选出来的，实际要附加通知的具体位置</p><p>（4）切面：Aspect，描述通知与切入点的对应关系（通知加切入点）</p><p>（5）目标对象：Target,通知所应用的对象</p><p>切点表达式（带？可省略）execution(访问修饰符？返回值 包名.类名.?方法名（方法参数）throws 异常？)</p><h4 id="8-动态代理"><a href="#8-动态代理" class="headerlink" title="8.动态代理"></a>8.动态代理</h4><p>动态代理是在运行时动态的为对象创建代理的技术</p><table><thead><tr><th align="center"></th><th align="center">必须实现接口</th><th align="center">支持拦截public方法</th><th align="center">支持拦截protected方法</th><th align="center">拦截默认作用域方法</th></tr></thead><tbody><tr><td align="center">JDK动态代理</td><td align="center">是</td><td align="center">是</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">CGLIB代理</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr></tbody></table><p>虽然CGLIB代理支持拦截非public作用域方法调用，但不同对象交互是，建议还是以public方法调用为主</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/05/04/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E6%80%BB%E7%BB%93/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
